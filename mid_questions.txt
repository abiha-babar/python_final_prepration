# 1. You are given the following code, write its output:
# list_A = [17, 3]
# list_A.append(5)
# list_B = list_A.copy()
# list_B.append(21)
# list_C = list_A.copy()
# list_A.append(8)
# list_C.append(4)
# print(list_A)
# print(list_B)
# print(list_C)

# 2. What is printed by the following function if it is given the number 1 as n? 
# def numLegs(n):
#     if n == 0:
#         print("haha you can’t walk!")
#     if n == 1:
#         print( "you win! – you are a programmer")
#     if n == 2:
#         print("thats normal")
#     else:
#         print("you did not win - You are week in python")

# numLegs(1)

# 3. You have the following code, you will write the output of the code, what is the output type (data type)

#     a. round(1.8888, 3), round(1.8888, 2), round(1.8888, 1), round(1.8888, 0)
#     b. round(888.88,1),round(888.88,0),round(888.88,-1),round(888.88,-2),round(888.88,-3)
#     c. round(15, -1)
#     d. False // 2, True + True + True, (True + True + True) % 2, 100 * False
#     e. bool({'a': 1}), bool({}),  bool({1, 2, 3}), bool(set()), bool(None)
#     f. ([1,2,3] or ([0] and {0:0})) and (bool(None) and bool([None]))
#     g. [1, 2] in [[1,2], [2,3], 'abc'], 1 in {'key1': 1, 'key2': 2}

# 4. 
#      You are using python and you run this code
# 	datetime.utcnow()
#     The output of this code was
# 	2019-08-22 04:15:14

# You have the following function,
# def log(msg, *, dt= datetime.utcnow()):
#     print('{0}: {1}'.format(dt, msg))  

# You call this function, at the time mentioned above, as follows,

# log('message 1') --- the function was called on 2019-12-24 12:30:12
# log('message 2') --- the function was called on 2019-12-24 01:00:59
# log('message 3') --- the function was called on 2019-12-24 01:51:39

# What will be the output of the above three calls of log function? Give very brief explanation of your answer.

# 5. Write a function with three positional arguments, among which one is mandatory and other two are optional, there must not be any further positional argument. The same function will also have two mandatory keyword arguments and then optional scope up keyword argument.

# 6.      Suppose you have the following function,

# def fun(a,b,c=1,*args,d=3,e):
#     print(a,b,c,args,d,e)

# and you call this function as follows,

# fun(1,2,'x','y','z',c=-20,d=3)

# what will be the output of this function? If there is an error then you must tell the reason of that error(s), without proper reason(s) no points will be awarded.


# 7.      You have the following list 

# lst = ['a',1,'b',2,'c',3,'d',4,'e',5,'f',6,'g',7,'h',8,'i',9,'j',10,'k']

# Write a list comprehension expression such that this above list is converted into the following, 
 
# Output  {'a': 1,‘b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j': 10}


# 8.      You have the following lists,

# l1 = ['a','b','c','d']
# l2 = ['b','c','d','e']
# You will use the list comprehension to produce combination of ['ab','ac','ad','ae','bc','bd', 'be','cb','cd','ce','db','dc','de'].
# You can clearly observe that characters are not repeating, for example, combination bb, cc, dd are excluded from the combination. The answer is one liner, answers other than list comprehension will not be accepted as correct.


# 9.      You have the following list,
# l = [1,2,3,4,’python’]

# Write unpacking and list slicing expression to get the following output

# a : 1
# b : [2,3,4]
# c : p
# d : y
# e : [‘t’,’h’,’o’,’n’]

#     i) (3 points) You will give the corresponding slicing expression (without slicing, no points)
#     ii) (3 points) You will provide the unpacking expression (without unpacking expression, no points)

# 10.      You have the following lists,

# l1 = [2,3,7,9,25,60,1,26,13,11,81,99]
# l2 = [17,81,19,10,11,20,30,-10,-256,0]

# You will filter the list l1 by removing the element which are divisible by 2 and elements are smaller than 60. You will also filter the list l2 such that those elements which are multiple of 10 and remove the negative values and zero. Then you will add the two filtered lists element by element (e.g. [1,2,3] and [4,5,6] then adding two lists element by element output will be [5,7,9]).

# The result of this procedure will produce the following output,

# [13, 27, 39]

# Then you will take sum of this above list, its output will be 79   i.e (13+27+39) = 79

# Important:  you will use lambda,  map, filter and reduce functions to achieve the above task (no other solution will be accepted).

# 11. What are higher order functions?
# 12. What makes objects as “first class citizen” in Python